//
//  HomePresenter.swift
//  BrazilTestiOS
//
//  Created by Mujeeb Ulla Shariff on 01/11/19.
//  Copyright (c) 2019 Mujeeb Ulla Shariff. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic {
  func presentAccountDetails(response: Home.HomeData.Response)
  func presentStatementDetails(response: Home.GetStatementList.Response)
  func logout()
}

class HomePresenter: HomePresentationLogic {
  
  weak var viewController: HomeDisplayLogic?
  
  // Format user account details & send to viewController
  func presentAccountDetails(response: Home.HomeData.Response) {
    guard let name = response.accountDetails.name else{return}
    guard let bankAccount = response.accountDetails.bankAccount else{return}
    guard let agency = response.accountDetails.agency else{return}
    let account = bankAccount + " / " + agency
    guard let balance = response.accountDetails.balance else{return}
    let viewModel = Home.HomeData.ViewModel(name: name, accountNumber: account, balance: balance)
    viewController?.displayUserDetails(viewModel: viewModel)
  }
  
  // Format user transaction details & send to viewController
  func presentStatementDetails(response: Home.GetStatementList.Response) {
    if let statements = response.statements {
      if !statements.isEmpty {
        let statementList = makeStatementList(statements: statements)
        let viewModel = Home.GetStatementList.ViewModel(success: true, statements: statementList)
        viewController?.displayAccountStatementList(viewModel: viewModel)
      }
    }
    
  }
  
  // call viewController's doLogout function
  func logout() {
    viewController?.doLogout()
  }
  
  // Make a list of statements and return to viewController's presentStatementDetails(response:) method
  private func makeStatementList(statements: [StatementList]?) -> [StatementList] {
    var accountStatementList: [StatementList] = []
    if let statementList = statements {
      for statement in statementList {
        let title = statement.title
        let desc = statement.desc
        let date = formatDate(date: statement.date)
        let balance = statement.value
        let accountStatement = StatementList(title: title, desc: desc, date: date, value: balance)
        accountStatementList.append(accountStatement)
      }
    }
    return accountStatementList
  }
  
  // Format the date and return to presentStatementDetails(response:) method
  func formatDate(date: String) -> String {
    let dateFormatter = DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd"
    guard let myDate = dateFormatter.date(from: date) else{return ""}
    dateFormatter.dateFormat = "MM/dd/YYYY"
    let formattedDateString = dateFormatter.string(from: myDate)
    return formattedDateString
  }
}
