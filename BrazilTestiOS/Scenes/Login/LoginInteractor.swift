//
//  LoginInteractor.swift
//  BrazilTestiOS
//
//  Created by Mujeeb Ulla Shariff on 01/11/19.
//  Copyright (c) 2019 Mujeeb Ulla Shariff. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
  func validateInputs(request: Login.ValidationModel.Request)
  func login(request: Login.LoginModel.Request)
}

protocol LoginDataStore
{
    var userDetails: UserAccount? { get }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    
  var presenter: LoginPresentationLogic?
  var worker: LoginWorker?
  var userDetails: UserAccount?
    
  // MARK: Validation
  
    func validateInputs(request: Login.ValidationModel.Request) {
        let user = request.user
        let password = request.password
        worker = LoginWorker()
        let validU: Bool?
        let validP: Bool?
        validU = worker?.validateUser(username: user!)
        validP = worker?.validatePassword(password: password!)
        let response = Login.ValidationModel.Response(validUser: validU!, validPassword: validP!)
        presenter?.presentValidationResult(response: response)
    }
    
  // MARK: Login
    
    func login(request: Login.LoginModel.Request) {
        let user = request.user
        let password = request.password
        worker = LoginWorker()
        worker?.login(username: user!, password: password!) { (success, response, error) in
            
            if(success){
                UserPersistance().saveUserId(userId: "\(response!.userAccount.userId)", userName: user)
            }
            let response = Login.LoginModel.Response(success: success, loginResponse: response!)
            self.userDetails = response.loginResponse.userAccount
            self.presenter?.presentLoginResult(response: response)
        }
    }
}
